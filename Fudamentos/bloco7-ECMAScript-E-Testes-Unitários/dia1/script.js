// Parte I
// Agora voc√™ vai fazer alguns exerc√≠cios de fixa√ß√£o.
// Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function .
// Modifique as concatena√ß√µes para template literals .
// Copie o c√≥digo abaixo.

// function testingScope(escopo) {
//   if (escopo === true) {
//     var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
//     ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
//     console.log(ifScope);
//   } else {
//     var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
//     console.log(elseScope);
//   }
//   console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
// }

// testingScope(true);

const testingScope = (escopo) => {
  if (escopo === true) {
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
    console.log(ifScope);
  } else {
    let elseScope = 'N√£o devo ser utilizada fora do meu escopo (else)';
    console.log(elseScope);
  }
}

testingScope(true);
testingScope(false);


// Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
// Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
{/* B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort() . Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros. */}
{/* Copie o c√≥digo abaixo. */}


const oddsAndEvens = [13, 3, 4, 10, 7, 2];

const ordenate = (array) => array.sort((a, b) => a - b);

console.log(`Os n√∫meros ${ordenate(oddsAndEvens)} se encontram ordenados de forma crescente!`); // ser√° necess√°rio alterar essa linha üòâ


// Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental que voc√™ utilize o que aprendeu sobre let , const , arrow functions , template literals e ternary operator .
//1. Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
// Na matem√°tica, o fatorial de um n√∫mero n√£o negativo N , com a nota√ß√£o N! , √© o produto de todos os inteiros menores ou iguais a N . Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva . Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator .
//2. Crie uma fun√ß√£o que receba uma frase e retorne qual a maior palavra.
// Exemplo:

const factorial = (number) => {
  let total = 1;
  for (let index = 1; index <= number; index += 1) {
    total *= index;
  }
  return total;
}

console.log(factorial(6));

const longestWord = (string) => {
  let longest = '';
  const array = string.split(' ');
  for (let index = 0; index < array.length; index += 1) {
    array[index].length > longest.length ? longest = array[index]: '';
    }
    return `A maior palavra encontrada √© '${longest}'.`;
  }

console.log(longestWord('Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu'));


// 3. Crie uma p√°gina que contenha:
// Um bot√£o ao qual ser√° associado um event listener ;
// Uma vari√°vel clickCount no arquivo JavaScript que acumule o n√∫mero de clicks no bot√£o;
// Um campo no HTML que v√° atualizando a quantidade de clicks no bot√£o conforme a vari√°vel clickCount √© atualizada.

const button = document.querySelector('button');
let clickCount = 0;
const paragraph = document.querySelector('p');
document.body.appendChild(paragraph);

button.addEventListener('click', () => {
  clickCount += 1;
  paragraph.innerText = `N√∫mero de cliques: ${clickCount}`;
});

// 4. Crie um c√≥digo JavaScript com a seguinte especifica√ß√£o:
// N√£o se esque√ßa de usar template literals
// Fun√ß√£o 1 : Escreva uma fun√ß√£o que vai receber uma string como par√¢metro. Sua fun√ß√£o dever√° procurar pela letra x em uma string qualquer que voc√™ determinar e substituir pela string que voc√™ passou como par√¢metro. Sua fun√ß√£o deve retornar essa nova string .
// Exemplo:
// String determinada: "Tryber x aqui!"
// Par√¢metro: "Bebeto"
// Retorno: "Tryber Bebeto aqui!"
// Um array com escopo global, que √© o escopo do arquivo JS , nesse caso, contendo cinco strings com suas principais skills .
// Fun√ß√£o 2 : Escreva uma fun√ß√£o que vai receber a string retornada da Fun√ß√£o 1 como par√¢metro. Essa fun√ß√£o deve concatenar as skills do array global √† string que foi passada para a Fun√ß√£o 2 via par√¢metro. Voc√™ deve ordenar os skills em ordem alfab√©tica. Sua fun√ß√£o deve retornar essa nova string .
// Exemplo: "Tryber x aqui! Minhas cinco principais habilidades s√£o:
// JavaScript;
// HTML; ... #goTrybe".

const changeX = (string) => {
  const phrase = 'Bora Trybers, x';
  const array = phrase.split(' ');
  let newPhrase = '';
  for (let index = 0; index < array.length; index += 1) {
    if (array[index] !== 'x') {
      newPhrase += `${array[index]} `;
    } else {
      newPhrase += string;
    }
  }
  return newPhrase;
}

const firstFunctionResult = changeX('VQV');

const skills = ['HTML', 'CSS', 'JavaScript', 'DOM', 'Terminal'];

const secondFunction = (result) => {
  console.log(`${firstFunctionResult}! Minhas cinco principais habilidades s√£o:`);
  for (let index = 0; index < skills.length; index += 1) {
    console.log(skills[index]);
  }
}

secondFunction(firstFunctionResult);